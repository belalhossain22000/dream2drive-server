// *! This is your Prisma schema file,
// *! learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ** user accoutn model
model User {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  email              String              @unique
  firstName          String
  lastName           String
  username           String
  password           String
  role               UserRole
  userStatus         UserStatus
  biddings           Bidding[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  Wishlist           Wishlist[]
  UserAccountDetails UserAccountDetails?
  Review             Review[]

  @@map("users")
}

// user wishlist model
model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  product   Products @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("wishlist")
}

// user bank account model
model UserAccountDetails {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  userId          String  @unique @db.ObjectId
  user            User    @relation(fields: [userId], references: [id])
  cardNumber      String
  firstName       String
  lastName        String
  phoneNumber     String
  billingAddress1 String
  address2        String?
  townCity        String
  countryState    String
  postcodeZipcode String
  country         String

  @@map("user_account_details")
}

// user status enum
enum UserStatus {
  ACTIVE
  BLOCKED
}

// user role enum
enum UserRole {
  ADMIN
  USER
}

// car/products model
model Products {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  productName         String          @unique
  ProductDescription  String
  auction             Boolean
  auctionStartDate    DateTime
  auctionEndDate      DateTime
  price               Int
  brandId             String          @db.ObjectId
  brand               Brand           @relation(fields: [brandId], references: [id])
  drivingPosition     drivingPosition
  totalCarRun         Int
  gearType            String
  keyFacts            String
  equipmentAndFeature String
  condition           String
  serviceHistory      String
  summary             String
  carMetal            String
  leatherMaterial     String
  carsInline          String
  vin                 String
  lot                 String
  ManufactureCountry  String
  status              carStatusEnum
  biddings            Bidding[]
  category            categoryEnum
  isDeleted           Boolean         @default(false)
  featured            Boolean         @default(false)
  Review              Review[]
  productSingleImage  Json
  productImage        Json
  interiorImage       Json
  exteriorImage       Json
  othersImages        Json
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  Wishlist            Wishlist[]

  @@map("products")
}

// model ProductImage {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   imagesUrl String[]
//   productId String   @db.ObjectId
//   product   Products @relation("ProductImages", fields: [productId], references: [id])

//   @@map("product_images")
// }

// review model
model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  product   Products @relation(fields: [productId], references: [id])

  @@map("reviews")
}

// car driving position enum
enum drivingPosition {
  RHD
  LHD
}

// car/porductrs category enum
enum categoryEnum {
  allLive
  commingSoon
  sold
}

// car status enum
enum carStatusEnum {
  pending
  live
  sold
}

// brand model
model Brand {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  brandName String     @unique
  Products  Products[]

  @@map("brands")
}

// 
model Article {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  bannerImage    String
  articleTitle   String
  articleImages  articleImages[]
  published_by   String
  published_Date DateTime
  viewed_by      Int
  description    String
  userComment    String          @db.ObjectId
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@map("articles")
}

model articleImages {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  image     String
  Article   Article? @relation(fields: [articleId], references: [id])
  articleId String?  @db.ObjectId
}

model Bidding {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  bidPrice  Int
  product   Products @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("biddings")
}
