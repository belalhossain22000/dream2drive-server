datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL") 
}


generator client {
  provider = "prisma-client-js"
}

// ** user account model
model User {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  email              String              @unique
  firstName          String
  lastName           String
  username           String
  mobile             String
  crediteCardStatus  CrediteCardStatus   @default(NOTUPLOADED)
  password           String
  role               UserRole
  userStatus         UserStatus
  biddings           Bidding[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  Wishlist           Wishlist[]
  UserAccountDetails UserAccountDetails?
  Review             Review[]
  Product            Product[]
  chatroomMembers    ChatroomMember[]    @relation("UserChatroomMembers")
  messages           Message[]           @relation("UserMessages")
  paymentInfos       paymentInfo[]

  @@map("users")
}

// user wishlist model
model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("wishlist")
}

// user bank account model
model UserAccountDetails {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  userId          String  @unique @db.ObjectId
  user            User    @relation(fields: [userId], references: [id])
  cardNumber      String
  firstName       String
  lastName        String
  phoneNumber     String
  billingAddress1 String
  address2        String?
  townCity        String
  countryState    String
  postcodeZipcode String
  country         String

  @@map("user_account_details")
}

// user status enum
enum UserStatus {
  ACTIVE
  BLOCKED
}

// credite card status

enum CrediteCardStatus {
  UPLOADED
  NOTUPLOADED
}

// user role enum
enum UserRole {
  ADMIN
  USER
}

// product model
model Product {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  productName         String
  singleImage         Json
  keyFacts            String
  equepmentAndFeature String
  condition           String
  serviceHistory      String
  summary             String
  youtubeVideo        String
  galleryImage        Json[]
  auctionStartDate    DateTime
  auctionEndDate      DateTime
  brandId             String        @db.ObjectId
  brand               Brand?        @relation(fields: [brandId], references: [id])
  speed               Float
  price               Float
  gear                String
  color               String
  interior            String
  engine              String
  vin                 String
  userId              String        @db.ObjectId
  user                User?         @relation(fields: [userId], references: [id])
  country             String
  isDeleted           Boolean       @default(false)
  featured            Boolean       @default(false)
  status              ProductStatus
  wishlist            Wishlist[]
  reviews             Review[]
  biddings            Bidding[]
  region              String
  sellerName          String
  sellerEmail         String
  sellerPhoneNumber   String
  sellerUserName      String
  lotNumbers          String
  paymentInfos        paymentInfo[]
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@map("products")
}

model paymentInfo {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId      String   @db.ObjectId
  user          User     @relation(fields: [clientId], references: [id])
  carsId        String   @db.ObjectId
  product       Product  @relation(fields: [carsId], references: [id])
  transactionId String
  amount        Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("payment_info")
}


enum ProductStatus {
  commingSoon
  live
  sold
  unsold
}

// review model
model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("reviews")
}

// brand model
model Brand {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  brandName String    @unique
  Products  Product[]

  @@map("brands")
}

model Bidding {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  bidPrice  Int
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("biddings")
}

model VehicleInfo {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName  String
  lastName   String
  email      String
  mobileNo   String
  carMake    String
  carDetails String
  carImage   String?
  aboutHear  String

  @@map("vehicleInfos")
}

model VehicleSourcing {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  phone         String
  model         String
  email         String
  manufacturer  String
  preferredYear String?
  maximumBudget String
  message       String?
  currency      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Payment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  amount    Int
  currency  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

// Chatroom model
model Chatroom {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  productId       String
  roomName        String
  roomMembers     Json
  messages        Message[]        @relation("ChatroomMessages")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  chatroomMembers ChatroomMember[]

  @@map("chatrooms")
}

// Message model
model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  chatroomId String   @db.ObjectId
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id], name: "ChatroomMessages")
  senderId   String   @db.ObjectId
  senderName String
  sender     User     @relation(fields: [senderId], references: [id], name: "UserMessages")
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("messages")
}

// ChatroomMember model to manage user-chatroom relationships
model ChatroomMember {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  chatroomId String   @db.ObjectId
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id])
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], name: "UserChatroomMembers")
  role       UserRole
  joinedAt   DateTime @default(now())

  @@map("chatroom_members")
}
