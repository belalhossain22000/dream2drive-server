// *! This is your Prisma schema file,
// *! learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ** user accoutn model
model User {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  email              String              @unique
  firstName          String
  lastName           String
  username           String
  password           String
  role               UserRole
  userStatus         UserStatus
  biddings           Bidding[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  Wishlist           Wishlist[]
  UserAccountDetails UserAccountDetails?
  Review             Review[]

  @@map("users")
}

// user wishlist model
model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("wishlist")
}

// user bank account model
model UserAccountDetails {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  userId          String  @unique @db.ObjectId
  user            User    @relation(fields: [userId], references: [id])
  cardNumber      String
  firstName       String
  lastName        String
  phoneNumber     String
  billingAddress1 String
  address2        String?
  townCity        String
  countryState    String
  postcodeZipcode String
  country         String

  @@map("user_account_details")
}

// user status enum
enum UserStatus {
  ACTIVE
  BLOCKED
}

// user role enum
enum UserRole {
  ADMIN
  USER
}

// product model
model Product {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  productName         String
  singleImage         Json
  keyFacts            String
  equepmentAndFeature String
  condition           String
  serviceHistory      String
  summary             String
  youtubeVideo        String
  galleryImage        Json[]
  exteriorImage       Json[]
  interiorImage       Json[]
  othersImage         Json[]
  auctionStartDate    DateTime
  auctionEndDate      DateTime
  brandId             String        @db.ObjectId
  brand               Brand         @relation(fields: [brandId], references: [id])
  speed               Float
  price               Float
  gear                String
  drivingSide         DrivingSide
  color               String
  interior            String
  engine              String
  vin                 String
  country             String
  isDeleted           Boolean       @default(false)
  featured            Boolean       @default(false)
  status              ProductStatus
  wishlist            Wishlist[]
  reviews             Review[]
  biddings            Bidding[]
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@map("products")
}

enum DrivingSide {
  LHD
  RHD
}

enum ProductStatus {
  commiSoon
  live
  sold
  unsold
}

// car driving position enum
enum drivingPosition {
  RHD
  LHD
}

// product status enum
enum productStatusEnum {
  commingSoon
  live
  sold
  unsold
}

// review model
model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("reviews")
}

// brand model
model Brand {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  brandName String    @unique
  Products  Product[]

  @@map("brands")
}

model Bidding {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  bidPrice  Int
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("biddings")
}

model VehicleInfo {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName  String
  lastName   String
  email      String
  mobileNo   String
  carMake    String
  carDetails String
  carImage   String?
  aboutHear  String
  carModel   String

  @@map("vehicleInfos")
}

model VehicleSourcing {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  phone         String
  model         String
  email         String // Optional field
  manufacturer  String
  preferredYear String? // Optional field
  maximumBudget String
  message       String? // Optional field
  currency      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
